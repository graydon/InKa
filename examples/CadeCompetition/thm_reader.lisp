
(defun random-set (number)

  (setq TPL:*PRINT-LENGTH* 100)
  (let (set new.number)
    (dotimes (i number)
      (do ((n (random 1169))) 
	  ((progn (setq new.number n) (and (not (member n set)) (not (member n invalid.ones)))))
	(setq n (random 1169)))
      (push new.number set))
    (sort set #'<)))


(defvar invalid.ones 
  '(14 24 33 34 35 36 37 38 39 44 50 52 53 54 56 77 78 89 95 98 105 129 
       130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 
       147 148 149 150 151 197 216 217 218 219 220 221 222 223 224 282 288 
       295 299 304 312 313 316 317 339 466 496 598 652 653 654 685 690 692 
       696 697 701 702 715 716 717 719 721 722 723 724 725 726 727 728 729 
       730 731 732 733 734 736 737 738 740 741 742 743 745 746 747 748 749 
       750 751 752 753 778 787 788 790 791 802 805 806 857 882 883 884 885 
       886 887 888 889 890 891 892 894 895 896 897 898 899 900 901 902 903 971
       1007 1008 1009 1011 1012 1032 1033 1034 1038 1039 1040 1069 1070 1071 
       1072 1073 1074 1075 1076 1078 1079 1080 1081 1082 1085 1086 1087 1091 
       1092 1093 1094 1095 1101 1110 1111 1112 1116 1117 1118 1119 1120 1121
       1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138
       1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 
       1153 1154))


-----------------------------------------------------------------------------------------
hutter@ws-421 [~] /opt/hutter/acl5/lisp
Loading /opt/hutter/acl5/libacl50b5.so.
Mapping /opt/hutter/acl5/lisp.dxl...done.
Mapping /opt/hutter/acl5/acl50b5.pll.
Allegro CL 5.0.beta [Linux/X86] (8/25/98 8:52)
Copyright (C) 1985-1998, Franz Inc., Berkeley, CA, USA.  All Rights Reserved.
;; Optimization settings: safety 1, space 1, speed 1, debug 2.
;; For a complete description of all compiler switches given the
;; current optimization settings evaluate (EXPLAIN-COMPILER-SETTINGS).
USER(1): (defun random-set (number)

  (setq TPL:*PRINT-LENGTH* 100)
  (let (set new.number)
    (dotimes (i number)
      (do ((n (random 1169)))
          ((progn (setq new.number n) (and (not (member n set)) (not (member n invalid.ones)))))
        (setq n (random 1169)))
      (push new.number set))
    (sort set #'<)))
RANDOM-SET
USER(2): (defvar invalid.ones
  '(14 24 33 34 35 36 37 38 39 44 50 52 53 54 56 77 78 89 95 98 105 129
       130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146
       147 148 149 150 151 197 216 217 218 219 220 221 222 223 224 282 288
       295 299 304 312 313 316 317 339 466 496 598 652 653 654 685 690 692
       696 697 701 702 715 716 717 719 721 722 723 724 725 726 727 728 729
       730 731 732 733 734 736 737 738 740 741 742 743 745 746 747 748 749
       750 751 752 753 778 787 788 790 791 802 805 806 857 882 883 884 885
       886 887 888 889 890 891 892 894 895 896 897 898 899 900 901 902 903
       1007 1008 1009 1011 1012 1032 1033 1034 1038 1039 1040 1069 1070 1071
       1072 1073 1074 1075 1076 1078 1079 1080 1081 1082 1085 1086 1087 1091
       1092 1093 1094 1095 1101 1110 1111 1112 1116 1117 1118 1119 1120 1121
       1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138                                
       1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152
       1153 1154))
INVALID.ONES
USER(3): (random-set 50)
(8 20 59 85 112 155 176 181 213 243 252 287 319 340 355 361 362 422 431
 475 481 522 533 573 584 591 596 617 661 681 686 688 700 770 801 816
 834 873 928 929 955 971 982 1016 1037 1084 1124 1157 1166 1168)
USER(4):

