
structure TR, BRANCHES:tag;

unspec structure tree;

structure nil, cons(car:tree, cdr:treelist):treelist;

structure empty, push(top:tree, pop:stack):stack;

unspec structure label;

d-function top_n(nat, stack):stack;

d-function pop_n(nat, stack):stack;

d-function red_trees(label, nat, stack):stack;

d-function mk_tree(label, stack):tree;

d-function list(tree):stack;

d-function app(stack, stack):stack;

d-function frontier(tag, tree):stack;

function leaves(x:stack):stack =
 if x = empty then empty
 if x of push then app(frontier(TR, top(x)), leaves(pop(x)));

function from_bottom(s:stack):stack =
 if s = empty then empty
 if s of push then app(from_bottom(pop(s)), list(top(s)));

axiom all lhs:label all size:nat all st:stack
  red_trees(lhs, size, st) = push(mk_tree(lhs,top_n(size, st)), pop_n(size, st));

axiom all x:tree all y:stack from_bottom(push(x, y)) = app(from_bottom(y), list(x));

axiom all x,y:stack leaves(app(x, y)) = app(leaves(x), leaves(y));

axiom all x:tree leaves(list(x)) = frontier(TR, x);

axiom all x:label all y:stack frontier(TR, mk_tree(x, y)) = leaves(y);

axiom all n:nat all s:stack app(from_bottom(pop_n(n, s)), top_n(n, s))  = from_bottom(s);


all lhs:label all size:nat all st:stack
  leaves(from_bottom(red_trees(lhs, size, st))) = leaves(from_bottom(st));