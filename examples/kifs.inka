 +INSERT
STRUCTURE 0 s (nat):nat
 |
 +INSERT
STRUCTURE nil add (nat list):list
 |
 +INSERT
FUNCTION plus (n1,n2:nat):nat =
IF n1 = 0 THEN n2
IF EX n3:nat n1 = s (n3) THEN s (plus (n3 n2))
 |
 +INSERT
FUNCTION times (n1,n2:nat):nat =
IF n1 = 0 THEN 0
IF EX n3:nat n1 = s (n3) THEN plus (n2 times (n3 n2))
 |
 +INSERT
FUNCTION difference (n1,n2:nat):nat =
IF n2 = 0 THEN n1
IF NOT n2 = 0 AND n1 = 0 THEN 0
IF EX n3,n4:nat n1 = s (n3) AND n2 = s (n4) THEN difference (n3 n4)
 |
 +INSERT
commutative(plus)
 |
 +INSERT
associative(plus)
 |
 +INSERT
commutative(times)
 |
 +INSERT
ALL n1,n2,n3:nat times (n1 plus (n2 n3)) = plus (times (n1 n2) times (n1 n3))
 |
 +INSERT
associative(times)
 |
 +INSERT
PREDICATE Less (n1,n2:nat) =
IF n2 = 0 THEN False
IF NOT n2 = 0 AND n1 = 0 THEN True
IF EX n3,n4:nat n1 = s (n3) AND n2 = s (n4) THEN Less (n3 n4)
 |
 +INSERT
PREDICATE Lesseq (n1,n2:nat) =
IF n1 = n2 THEN True
IF NOT n1 = n2 THEN Less (n1 n2)
 |
 +INSERT
PREDICATE Even (n1:nat) =
IF n1 = 0 THEN True
IF n1 = s (0) THEN False
IF EX n2:nat n1 = s (s (n2)) THEN Even (n2)
 |
 +INSERT
FUNCTION double (n1:nat):nat = plus (n1 n1)
 |
 +INSERT
FUNCTION half (n1:nat):nat =
IF n1 = 0 THEN 0
IF n1 = s (0) THEN 0
IF EX n2:nat n1 = s (s (n2)) THEN s (half (n2))
 |
 +INSERT
ALL n1:nat (Even (n1) IMPL double (half (n1)) = n1)
 |
 +INSERT
ALL n1:nat half (double (n1)) = n1
 |
 +INSERT
ALL n1:nat Lesseq (double (half (n1)) n1)
 |
 +INSERT
ALL n1,n2:nat (NOT Less (n1 n2) IMPL plus (difference (n1 n2) n2) = n1)
 |
 +INSERT
ALL n1,n2:nat difference (plus (n2 n1) n2) = n1
 |
 +INSERT
PREDICATE Member (n1:nat l1:list) =
IF l1 = nil THEN False
IF EX l2:list EX n2:nat l1 = add (n2 l2) AND n1 = n2 THEN True
IF EX l3:list EX n3:nat l1 = add (n3 l3) AND NOT n1 = n3 THEN Member (n1 l3)
 |
 +INSERT
FUNCTION append (l1,l2:list):list =
IF l1 = nil THEN l2
IF EX l3:list EX n1:nat l1 = add (n1 l3) THEN add (n1 append (l3 l2))
 |
 +INSERT
FUNCTION reverse (l1:list):list =
IF l1 = nil THEN nil
IF EX l2:list EX n1:nat l1 = add (n1 l2)
   THEN append (reverse (l2) add (n1 nil))
 |
 +INSERT
FUNCTION count (l1:list):nat =
IF l1 = nil THEN 0
IF EX l2:list EX n1:nat l1 = add (n1 l2) THEN s (count (l2))
 |
 +INSERT
ALL l1,l2:list ALL n1:nat (Member (n1 l2) IMPL Member (n1 append (l2 l1)))
 |
 +INSERT
ALL l1,l2:list ALL n1:nat
    (Member (n1 append (l2 l1)) IMPL (Member (n1 l1) OR Member (n1 l2)))
 |
 +INSERT
ALL l1:list reverse (reverse (l1)) = l1
 |
 +INSERT
ALL l1,l2:list count (append (l1 l2)) = plus (count (l1) count (l2))
 |
 OK
