enum structure tt, ff : bool;

function p2:nat = s(s(0));
function p5:nat = s(s(s(p2)));

structure nil, cons(car:nat, cdr:list):list;

function prefix(l1,l2:list):bool = 
if l1 = nil then tt
otherwise 
{if l2 = nil then ff
 otherwise
 {if car(l1) = car(l2) then prefix(cdr(l1), cdr(l2))
  otherwise ff
}};


enum structure e1, e2, ne : aelem;

enum structure epsl, e1l, e2l, e1e2l, e2e1l, error : atail;

structure quad(nonempty:bool, oneelem:bool, hd:aelem, tl:atail) : alist;


function atailpref(l1:atail, l2:atail):bool =
if l1 = epsl then tt
if not l1 = epsl and l2 = error then tt
if l1 = e1l and l2 = e1l then tt
if l1 = e1l and l2 = e1e2l then tt
if l1 = e2l and l2 = e2l then tt
if l1 = e2l and l2 = e2e1l then tt
if l1 = e1e2l and l2 = e1e2l then tt
if l1 = e2e1l and l2 = e2e1l then tt
otherwise ff;


function aprefix(l1:alist, l2:alist):bool = 
if nonempty(l1) = tt then atailpref(tl(l1), tl(l2))
otherwise tt;


function alphaelem(a:nat):aelem = 
if a = p2 then e1
otherwise { if a = p5 then e2
              otherwise ne} ;


function check_nonempty(l:list):bool =
if l = nil then ff
otherwise tt;

function check_oneel(l:list):bool =
if l = nil then ff
if NOT l = nil AND cdr(l) = nil then tt
           otherwise ff;


function combine(x:aelem, y:atail):atail =

 if x = ne then y
 if x = e1 and y = epsl then e1l
 if x = e1 and y = e2l then e1e2l
 if x = e2 and y = epsl then e2l
 if x = e2 and y = e1l then e2e1l
 otherwise error;

function alphatail(l:list):atail =
if l = nil then epsl
otherwise  combine(alphaelem(car(l)), alphatail(cdr(l)));


function alpha(l:list):alist =
quad(check_nonempty(l), check_oneel(l), alphaelem(car(l)),
alphatail(l));

all l1,l2:atail all n:aelem
  atailpref(combine(n, l1), combine(n, l2)) = tt or not atailpref(l1, l2) = tt;


all l1,l2:list all n:nat 
prefix(l1,l2) = tt -> aprefix(alpha(l1),alpha(l2)) = tt;








