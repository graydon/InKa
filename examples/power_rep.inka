 +INSERT
STRUCTURE 0 succ (pred:number):number
 |
 +INSERT
STRUCTURE empty add (head:number tail:list):list
 |
 +INSERT
FUNCTION minus1 (n1,n2:number):number =
IF n2 = 0 THEN n1
IF n2 = succ (pred (n2)) THEN minus1 (pred (n1) pred (n2))
 |
 +INSERT
PREDICATE Lt (n1,n2:number) =
IF n2 = 0 THEN False
IF n1 = 0 AND NOT n2 = 0 THEN True
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2))
   THEN Lt (pred (n1) pred (n2))
 |
 +INSERT
FUNCTION quotient1 (n1,n2:number):number =
IF n2 = 0 THEN n1
IF Lt (n1 n2) THEN 0
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN succ (quotient1 (minus1 (pred (n1) pred (n2)) n2))
 |
 +INSERT
FUNCTION min (n1,n2:number):number =
IF n1 = 0 THEN 0
IF n1 = succ (pred (n1)) AND n2 = 0 THEN 0
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2))
   THEN succ (min (pred (n1) pred (n2)))
 |
 +INSERT
FUNCTION remainder1 (n1,n2:number):number =
IF n2 = 0 THEN n2
IF Lt (n1 n2) THEN min (n1 n2)
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN remainder1 (minus1 (n1 n2) n2)
 |
 +INSERT
FUNCTION power.rep1 (n1,n2:number):list =
IF n1 = 0 THEN empty
IF n1 = succ (pred (n1)) AND n2 = 0 THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (0) THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2)) AND NOT pred (n2) = 0
   THEN add (remainder1 (n1 n2) power.rep1 (quotient1 (n1 n2) n2))
 |
 -INSERT
FUNCTION minus2 (n1,n2:number):number =
IF n2 = 0 THEN n1
IF n2 = succ (pred (n2)) THEN pred (minus2 (n1 pred (n2)))
 |
 -INSERT
FUNCTION quotient2 (n1,n2:number):number =
IF n2 = 0 THEN n1
IF Lt (n1 n2) THEN 0
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN succ (quotient2 (minus2 (pred (n1) pred (n2)) n2))
 |
 -INSERT
FUNCTION remainder2 (n1,n2:number):number =
IF n2 = 0 THEN n2
IF Lt (n1 n2) THEN min (n1 n2)
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN remainder2 (minus2 (n1 n2) n2)
 |
 -INSERT
FUNCTION power.rep2 (n1,n2:number):list =
IF n1 = 0 THEN empty
IF n1 = succ (pred (n1)) AND n2 = 0 THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (0) THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2)) AND NOT pred (n2) = 0
   THEN add (remainder2 (n1 n2) power.rep2 (quotient2 (n1 n2) n2))
 |
 -INSERT
FUNCTION minus3 (n1,n2:number):number =
IF n1 = 0 THEN n1
IF n1 = succ (pred (n1)) AND n2 = 0 THEN n1
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2))
   THEN minus3 (pred (n1) pred (n2))
 |
 -INSERT
FUNCTION quotient3 (n1,n2:number):number =
IF n2 = 0 THEN n1
IF Lt (n1 n2) THEN 0
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN succ (quotient3 (minus3 (pred (n1) pred (n2)) n2))
 |
 -INSERT
FUNCTION remainder3 (n1,n2:number):number =
IF n2 = 0 THEN n2
IF Lt (n1 n2) THEN min (n1 n2)
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN remainder3 (minus3 (n1 n2) n2)
 |
 -INSERT
FUNCTION power.rep3 (n1,n2:number):list =
IF n1 = 0 THEN empty
IF n1 = succ (pred (n1)) AND n2 = 0 THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (0) THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2)) AND NOT pred (n2) = 0
   THEN add (remainder3 (n1 n2) power.rep3 (quotient3 (n1 n2) n2))
 |
 -INSERT
FUNCTION minus4 (n1,n2:number):number =
IF n1 = 0 THEN n1
IF n1 = succ (pred (n1)) AND n2 = 0 THEN n1
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2))
   THEN pred (minus4 (n1 pred (n2)))
 |
 -INSERT
FUNCTION quotient4 (n1,n2:number):number =
IF n2 = 0 THEN n1
IF Lt (n1 n2) THEN 0
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN succ (quotient4 (minus4 (pred (n1) pred (n2)) n2))
 |
 -INSERT
FUNCTION remainder4 (n1,n2:number):number =
IF n2 = 0 THEN n2
IF Lt (n1 n2) THEN min (n1 n2)
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN remainder4 (minus4 (n1 n2) n2)
 |
 -INSERT
FUNCTION power.rep4 (n1,n2:number):list =
IF n1 = 0 THEN empty
IF n1 = succ (pred (n1)) AND n2 = 0 THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (0) THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2)) AND NOT pred (n2) = 0
   THEN add (remainder4 (n1 n2) power.rep4 (quotient4 (n1 n2) n2))
 |
 -INSERT
PREDICATE Gt (n1,n2:number) =
IF n1 = 0 THEN False
IF n1 = succ (pred (n1)) AND n2 = 0 THEN True
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2))
   THEN Gt (pred (n1) pred (n2))
 |
 -INSERT
FUNCTION minus5 (n1,n2:number):number =
IF NOT Gt (n1 n2) THEN 0
IF Gt (n1 n2) and n1=succ(pred(n1)) THEN succ (minus5 (pred (n1) n2))
 |
 -INSERT
FUNCTION quotient5 (n1,n2:number):number =
IF n2 = 0 THEN n1
IF Lt (n1 n2) THEN 0
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN succ (quotient5 (minus5 (pred (n1) pred (n2)) n2))
 |
 -INSERT
FUNCTION remainder5 (n1,n2:number):number =
IF n2 = 0 THEN n2
IF Lt (n1 n2) THEN min (n1 n2)
IF NOT Lt (n1 n2) AND n2 = succ (pred (n2))
   THEN remainder5 (minus5 (n1 n2) n2)
 |
 -INSERT
FUNCTION power.rep5 (n1,n2:number):list =
IF n1 = 0 THEN empty
IF n1 = succ (pred (n1)) AND n2 = 0 THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (0) THEN add (n1 empty)
IF n1 = succ (pred (n1)) AND n2 = succ (pred (n2)) AND NOT pred (n2) = 0
   THEN add (remainder5 (n1 n2) power.rep5 (quotient5 (n1 n2) n2))
 |
 OK
